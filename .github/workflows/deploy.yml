name: Deploy Transcription Services

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      cloud_provider:
        description: 'Cloud provider'
        required: true
        default: 'gcp'
        type: choice
        options:
        - gcp
        - aws
        - azure
        - docker

env:
  # Default values
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Test and validation job
  test-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements/dev.txt
    
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest tests/ --cov=services --cov-report=xml --cov-report=term-missing
    
    - name: Run type checks
      run: |
        source .venv/bin/activate
        mypy services/ || true  # Don't fail on type warnings
    
    - name: Run linting
      run: |
        source .venv/bin/activate
        ruff check services/ tests/ || true  # Don't fail on lint warnings
    
    - name: Validate configuration
      run: |
        source .venv/bin/activate
        python cli/config_manager.py validate || true  # Don't fail if no config
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
        PROJECT_ID: ${{ vars.PROJECT_ID || 'test-project' }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [gateway, transcription-api, webhook-api, orchestration-api]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          transcription-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: ./api/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test image
      run: |
        docker run --rm transcription-${{ matrix.service }}:latest python --version

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-validate, build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up environment variables
      run: |
        echo "ENVIRONMENT=staging" >> $GITHUB_ENV
        echo "CLOUD_PROVIDER=${{ github.event.inputs.cloud_provider || 'docker' }}" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
    
    - name: Deploy to staging
      run: |
        ./deploy/deploy.sh \
          --provider ${{ env.CLOUD_PROVIDER }} \
          --environment ${{ env.ENVIRONMENT }} \
          --tag ${{ env.TAG }} \
          --dry-run
      env:
        PROJECT_ID: ${{ vars.PROJECT_ID }}
        REGION: ${{ vars.REGION }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-validate, build-images]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract tag version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    
    - name: Set deployment variables
      run: |
        echo "ENVIRONMENT=production" >> $GITHUB_ENV
        echo "CLOUD_PROVIDER=${{ github.event.inputs.cloud_provider || 'gcp' }}" >> $GITHUB_ENV
        echo "TAG=${{ env.TAG || github.sha }}" >> $GITHUB_ENV
    
    - name: Deploy to production
      run: |
        ./deploy/deploy.sh \
          --provider ${{ env.CLOUD_PROVIDER }} \
          --environment ${{ env.ENVIRONMENT }} \
          --tag ${{ env.TAG }} \
          --dry-run
      env:
        PROJECT_ID: ${{ vars.PROJECT_ID }}
        REGION: ${{ vars.REGION }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r services/ -f json -o bandit-report.json || true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js for load testing
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        # Create basic k6 performance test
        cat > k6-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';
        
        export let options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 10 },
            { duration: '2m', target: 0 },
          ],
        };
        
        export default function() {
          let response = http.get('http://localhost:8000/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
        }
        EOF
        
        # Run performance test (mock - would need actual deployment)
        echo "Performance testing would run here against staging environment"

  # Notification
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, security-scan]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Transcription Services Deployment
          Environment: ${{ env.ENVIRONMENT }}
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}