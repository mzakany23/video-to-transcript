#!/usr/bin/env python3
"""
Example demonstrating FastAPI integration with modular services
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent.parent))

def main():
    """Demonstrate FastAPI service integration"""
    
    print("=== FastAPI Service Integration Example ===\n")
    
    # Test services integration
    print("1. Testing service integration:")
    
    try:
        from services import ServiceFactory, Settings
        
        # Create development settings
        dev_settings = Settings(
            storage_provider="local",
            transcription_provider="openai", 
            job_runner="local",
            environment="development"
        )
        
        # Configure local paths
        dev_settings.storage_configs["local"].config["base_path"] = "./data/fastapi_storage"
        dev_settings.job_runner_configs["local"].config["work_dir"] = "./data/fastapi_jobs"
        
        factory = ServiceFactory(dev_settings)
        
        print("   ‚úÖ ServiceFactory created successfully")
        
        # Test service creation
        storage_service = factory.create_storage_service()
        orchestration_service = factory.create_orchestration_service()
        
        print("   ‚úÖ Storage service created")
        print("   ‚úÖ Orchestration service created")
        
        # Get provider information
        providers = factory.get_available_providers()
        print(f"   ‚úÖ Available providers loaded: {len(providers)} types")
        
    except Exception as e:
        print(f"   ‚ùå Service integration error: {e}")
        return
    
    # Test FastAPI app structure
    print("\n2. FastAPI application structure:")
    
    try:
        # Test transcription API structure
        transcription_api_path = Path(__file__).parent.parent / "api" / "transcription-api"
        
        if transcription_api_path.exists():
            print("   ‚úÖ Transcription API directory exists")
            
            # Check key files
            key_files = [
                "main.py", "models.py", "config.py", "dependencies.py",
                "routers/__init__.py", "routers/health.py", "routers/transcription.py",
                "routers/jobs.py", "routers/providers.py"
            ]
            
            for file_path in key_files:
                file_check = transcription_api_path / file_path
                if file_check.exists():
                    print(f"   ‚úÖ {file_path} exists")
                else:
                    print(f"   ‚ùå {file_path} missing")
        
        else:
            print("   ‚ùå Transcription API directory not found")
    
    except Exception as e:
        print(f"   ‚ùå FastAPI structure check error: {e}")
    
    # Test OpenAPI schemas
    print("\n3. OpenAPI schema validation:")
    
    try:
        schemas_path = Path(__file__).parent.parent / "api" / "schemas"
        
        if schemas_path.exists():
            schema_files = [
                "transcription-api.yaml",
                "webhook-api.yaml", 
                "orchestration-api.yaml"
            ]
            
            for schema_file in schema_files:
                schema_path = schemas_path / schema_file
                if schema_path.exists():
                    # Try to parse YAML
                    import yaml
                    with open(schema_path, 'r') as f:
                        schema = yaml.safe_load(f)
                    
                    title = schema.get('info', {}).get('title', 'Unknown')
                    version = schema.get('info', {}).get('version', 'Unknown')
                    paths_count = len(schema.get('paths', {}))
                    
                    print(f"   ‚úÖ {title} v{version} - {paths_count} endpoints")
                else:
                    print(f"   ‚ùå {schema_file} missing")
        
        else:
            print("   ‚ùå API schemas directory not found")
    
    except Exception as e:
        print(f"   ‚ùå Schema validation error: {e}")
    
    # Demonstrate API capabilities
    print("\n4. API service capabilities:")
    
    print("   üîó Transcription API (Port 8001):")
    print("      POST /transcribe - Upload and transcribe audio file")
    print("      POST /transcribe/url - Transcribe from URL") 
    print("      POST /transcribe/batch - Batch transcription")
    print("      GET /jobs/{id} - Get job status")
    print("      GET /jobs/{id}/result - Download result")
    print("      GET /providers - List providers")
    print("      GET /health - Health check")
    print("      GET /docs - Interactive API documentation")
    
    print("\n   üîó Webhook API (Port 8002):")
    print("      POST /webhooks/dropbox - Process Dropbox webhooks")
    print("      GET /cursors - Manage change cursors")
    print("      GET /tracking/processed - View processed files")
    print("      POST /admin/reset - Reset processing state")
    
    print("\n   üîó Orchestration API (Port 8003):")
    print("      POST /jobs - Submit job")
    print("      GET /jobs - List jobs with filtering")
    print("      POST /jobs/batch - Submit batch jobs")
    print("      GET /runners - List job runners")
    print("      POST /runners/{id}/validate - Validate runner")
    
    # Integration benefits
    print("\n5. Integration benefits:")
    
    print("   üéØ API-First Design:")
    print("      ‚Ä¢ OpenAPI specs define contracts before implementation")
    print("      ‚Ä¢ Automatic documentation generation")
    print("      ‚Ä¢ Client SDK generation possible")
    
    print("\n   üîß Modular Architecture:")
    print("      ‚Ä¢ Each API service is independently deployable")
    print("      ‚Ä¢ Services use shared modular backend")
    print("      ‚Ä¢ Configuration-driven provider selection")
    
    print("\n   üöÄ Production Ready:")
    print("      ‚Ä¢ Health checks and status endpoints")
    print("      ‚Ä¢ CORS and security middleware")
    print("      ‚Ä¢ Comprehensive error handling")
    print("      ‚Ä¢ Async/await throughout")
    
    print("\n   üîå MCP Integration Ready:")
    print("      ‚Ä¢ RESTful APIs perfect for MCP tools")
    print("      ‚Ä¢ JSON schema validation")
    print("      ‚Ä¢ Clear endpoint documentation")
    print("      ‚Ä¢ Standardized error responses")
    
    print("\n=== FastAPI Integration Demo Complete ===")
    
    print("\nüöÄ To run the transcription API:")
    print("   cd api/transcription-api")
    print("   pip install -r requirements.txt")
    print("   python main.py")
    print("   # Visit http://localhost:8001/docs for interactive API")
    
    print("\nüåü Key achievements:")
    print("‚Ä¢ Complete OpenAPI 3.0 specifications for all services")
    print("‚Ä¢ Working FastAPI application with dependency injection")
    print("‚Ä¢ Integration with existing modular services")
    print("‚Ä¢ Ready for containerization and deployment")
    print("‚Ä¢ Perfect foundation for MCP integration")


if __name__ == "__main__":
    main()